// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`addPostcssPlugins adds postcss plugins to the postcss rule 1`] = `
{
  "module": {
    "rules": [
      {
        "oneOf": [
          {
            "use": [
              {
                "options": {
                  "ident": "postcss",
                  "plugins": [Function],
                },
              },
            ],
          },
        ],
      },
    ],
  },
}
`;

exports[`addWebpackAlias initializes resolve.alias with empty objects if non-existant 1`] = `
{
  "resolve": {
    "alias": {},
  },
}
`;

exports[`addWebpackAlias merges the provided alias object with the config resolve.alias object 1`] = `
{
  "resolve": {
    "alias": {
      "a": "A",
      "b": "b",
      "c": "c",
    },
  },
}
`;

exports[`addWebpackExternals returns function that spreads provided args last in externals list 1`] = `
{
  "externals": [
    [Function],
    /\\^\\(jquery\\|\\\\\\$\\)\\$/i,
    {
      "lodash": "Lodash",
      "react": "React",
      "react-dom": "ReactDom",
    },
  ],
}
`;

exports[`addWebpackModuleRule adds the provided rule to module.rules 1`] = `
{
  "module": {
    "rules": [
      {
        "oneOf": [
          {
            "name": "__TEST__",
          },
          {
            "test": true,
          },
        ],
      },
    ],
  },
}
`;

exports[`addWebpackPlugin adds the provided plugin to the config plugins list 1`] = `
{
  "plugins": [
    "A",
    "B",
  ],
}
`;

exports[`addWebpackResolve initializes resolve with empty object if non-existant 1`] = `
{
  "resolve": {},
}
`;

exports[`addWebpackResolve merges the provided resolve object into the config resolve object 1`] = `
{
  "resolve": {
    "alias": {
      "a": "a",
      "b": "B",
    },
  },
}
`;

exports[`adjustStyleLoaders find all style loaders and callback one by one 1`] = `
{
  "use": [
    "style-loader",
  ],
}
`;

exports[`adjustWorkbox calls the provided adjustment using the workbox plugin config 1`] = `
{
  "plugins": [
    {
      "config": {
        "test": true,
      },
      "constructor": {
        "name": "GenerateSW",
      },
    },
  ],
}
`;

exports[`disableChunk disables chunking config options 1`] = `
{
  "optimization": {
    "runtimeChunk": false,
    "splitChunks": {
      "cacheGroups": {
        "default": false,
      },
    },
  },
}
`;

exports[`eslint addTslintLoader adds tslint-loader as the first rule 1`] = `
{
  "module": {
    "rules": [
      {
        "enforce": "pre",
        "loader": "tslint-loader",
        "options": {
          "test": true,
        },
        "test": /\\\\\\.\\(ts\\|tsx\\)\\$/,
      },
      {
        "test": true,
      },
    ],
  },
}
`;

exports[`eslint disableEsLint filters out the eslint rules from the config rules list 1`] = `
{
  "module": {
    "rules": [],
  },
}
`;

exports[`eslint useEslintRc removes the base eslint config and uses the passed filename instead 1`] = `
{
  "module": {
    "rules": [
      {
        "use": [
          {
            "options": {
              "configFile": ".eslintrc",
              "ignore": true,
              "useEslintrc": true,
            },
          },
        ],
      },
    ],
  },
}
`;

exports[`removeModuleScopePlugin removes the 'ModuleScopePlugin' resolve plugin 1`] = `
{
  "resolve": {
    "plugins": [
      {
        "test": true,
      },
    ],
  },
}
`;

exports[`setWebpackOptimizationSplitChunks sets the customized optimization.splitChunks for webpack 1`] = `
{
  "optimization": {
    "splitChunks": {
      "chunks": "all",
      "maxSize": 1000000,
    },
  },
}
`;

exports[`setWebpackPublicPath sets the path and prepends and appends slashes 1`] = `
{
  "output": {
    "publicPath": "/mocked-public-path/",
  },
}
`;

exports[`setWebpackPublicPath sets the path as an http address 1`] = `
{
  "output": {
    "publicPath": "http://github.com/",
  },
}
`;

exports[`setWebpackPublicPath sets the path as an https address 1`] = `
{
  "output": {
    "publicPath": "https://github.com/",
  },
}
`;

exports[`setWebpackStats overrides the config stats object with the provided stats object 1`] = `
{
  "stats": {
    "b": "b",
    "c": "c",
  },
}
`;

exports[`setWebpackStats sets stats if it is a string 1`] = `
{
  "stats": "fake-normal-stats",
}
`;

exports[`setWebpackStats sets stats if it is an object 1`] = `
{
  "stats": {
    "assets": false,
  },
}
`;

exports[`setWebpackTarget sets the target as the config target 1`] = `
{
  "target": "mocked-new-target",
}
`;
